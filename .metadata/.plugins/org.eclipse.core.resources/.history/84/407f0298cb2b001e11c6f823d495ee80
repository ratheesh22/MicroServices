import java.util.Arrays;
import java.util.Comparator;
import java.util.DoubleSummaryStatistics;
import java.util.List;

public class Hello {
	
	/*
	 * Exercise: Given a list of integers, find the sum of all even numbers. Input:
	 * List<Integer> numbers = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10); Output:
	 * Sum of even numbers: 30
	 * 
	 * Exercise: Given a list of strings, convert all strings to uppercase and
	 * concatenate them into a single string separated by a space. Input:
	 * List<String> words = Arrays.asList("java", "stream", "api"); Output:
	 * "JAVA STREAM API"
	 * 
	 * Exercise: Given a list of strings, filter out the strings with a length less
	 * than 5 and sort the remaining strings in ascending order. Input: List<String>
	 * words = Arrays.asList("apple", "banana", "orange", "kiwi", "grape"); Output:
	 * ["apple", "grape", "kiwi"]
	 * 
	 * Exercise: Given a list of integers, find the maximum value using the reduce
	 * method. Input: List<Integer> numbers = Arrays.asList(23, 45, 12, 67, 34);
	 * Output: Max value: 67
	 * 
	 * Exercise: Given a list of strings, find the shortest string using the min
	 * method. Input: List<String> words = Arrays.asList("apple", "banana",
	 * "orange", "kiwi", "grape"); Output: "kiwi"
	 * 
	 * Exercise: Given a list of integers, calculate the average value using the
	 * average method. Input: List<Integer> numbers = Arrays.asList(23, 45, 12, 67,
	 * 34); Output: Average value: 36.2
	 * 
	 * Exercise: Given a list of strings, count the number of strings that start
	 * with the letter 'a'. Input: List<String> words = Arrays.asList("apple",
	 * "banana", "orange", "kiwi", "grape"); Output: Count of strings starting with
	 * 'a': 1
	 * 
	 * Exercise: Given a list of strings, find the longest string using the max
	 * method and return its length. Input: List<String> words =
	 * Arrays.asList("apple", "banana", "orange", "kiwi", "grape"); Output: Longest
	 * string length: 6
	 * 
	 * Exercise: Given a list of integers, remove all duplicates and return a new
	 * list without duplicates. Input: List<Integer> numbers = Arrays.asList(1, 2,
	 * 3, 2, 4, 5, 3, 6); Output: [1, 2, 3, 4, 5, 6]
	 * 
	 * Exercise: Given a list of strings, check if any string contains the substring
	 * "java". Input: List<String> words = Arrays.asList("javascript", "stream",
	 * "api", "java programming"); Output: true
	 */
	
	public static void main(String[] args) {
		List<Integer> numbers = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
		int c=numbers.stream().filter(a->a%2==0).reduce(0,(a,b)->a+b);
		System.out.println(c);
		List<String> words = Arrays.asList("java", "stream", "api");
		String word=words.stream().map(s->s.toUpperCase()).reduce("",(a,b)->a=a+b);
		System.out.println(word);
		List<String> str = Arrays.asList("apple", "banana", "orange", "kiwi", "grape");
		str.stream().filter(a->a.length()<=5).sorted().forEach(System.out::println);
		 List<Integer> numbers1 = Arrays.asList(23, 45, 12, 67, 34);

	        int max = numbers1.stream()
	                .reduce(Integer.MIN_VALUE, Integer::max);

	        System.out.println("Max value: " + max);
	        
	        List<String> wor = Arrays.asList("apple", "banana", "orange", "kiwi", "grape");
	        wor.stream().reduce("",(a,b)->b);
	        
	        List<Integer> numbers2 = Arrays.asList(23, 45, 12, 67, 34);
	        System.out.println(numbers2.stream().mapToDouble(a->a).average().getAsDouble());
	        List<String> words1 = Arrays.asList("apple", "banana", "orange", "kiwi", "grape");
	        System.out.println(words1.stream().filter(a->a.charAt(0)=='a').count());
	        List<String> sa = Arrays.asList("apple", "bananaddd", "orange", "kiwi", "grape");
	        System.out.println(sa.stream().map(a->a.length()).max(Comparator.naturalOrder()).get());
	        List<Integer> n = Arrays.asList(1, 2, 3, 2, 4, 5,6,66,6, 3, 6);
	        n.stream().distinct().forEach(System.out::println);
	        /*Exercise: Given a list of strings, check if any string contains the substring "java".
	        Input: List<String> words = Arrays.asList("javascript", "stream", "api", "java programming");
	        Output: true*/
	        List<String> wo = Arrays.asList("javascript", "stream", "api", "java programming");
	        System.out.println(wo.stream().filter(a->a.contains("java")));
	}
	        
	        

}
